{
    "collab_server" : "",
    "contents" : "# parent counter object\ncounter <- R6::R6Class(\"counter\",\n  private = list(\n    ..start = NULL,\n    ..end = NULL,\n    ..count = NULL,\n    ..increment = NULL,\n    ..pad = NULL,\n    ..status = \"ON\"\n  ),\n  public = list(\n    counter = function() {\n      if (private$..increment == \"add\") {\n        private$..count <- private$..count + 1\n      } else if (private$..increment == \"subtract\") {\n        private$..count <- private$..count - 1\n      }\n      if (private$..count == private$..end) {\n        private$..status <- \"OFF\"\n      }\n    },\n    display = function() {\n      message(stringr::str_c(stringr::str_pad(private$..count, private$..pad, pad = \"0\")))\n    },\n    finalize = function() {\n      message(\"tally counter OFF\")\n    }\n  ),\n  active = list(\n    status = function() {\n      private$..status\n    }\n  )\n)\n\n# child add counter object\ncounter_add <- R6::R6Class(\"counter_add\",\n  inherit = counter,\n  public = list(\n    initialize = function(limit) {\n      private$..end <- limit\n      private$..start <- 0L\n      if (nchar(as.character(limit)) < 4) {\n        private$..pad <- 4\n      } else {\n        private$..pad <- nchar(as.character(limit))\n      }\n      private$..count <- private$..start\n      private$..increment <- \"add\"\n      message(\"tally counter ON\")\n      self$display()\n    }\n  )\n)\n\n# child subtract counter object\ncounter_subtract <- R6::R6Class(\"counter_add\",\n   inherit = counter,\n   public = list(\n     initialize = function(limit) {\n       private$..end <- 0L\n       private$..start <- limit\n       if (nchar(as.character(limit)) < 4) {\n           private$..pad <- 4\n       } else {\n           private$..pad <- nchar(as.character(limit))\n       }\n       private$..count <- private$..start\n       private$..increment <- \"subtract\"\n       message(\"tally counter ON\")\n       self$display()\n       }\n    )\n)\n\n\n#' tally_counter\n#'\n#' @param data\n#'\n#' @return\n#' @export\n#'\n#' @examples\n#' data <- data.frame(x = 1:10)\ntally_counter <- function(data, ...) {\n\n  # get function arguements\n  arg_list <- list(...)\n  max_limit <- nrow(data)\n\n  # create counter object in new counter_env environment\n  assign(\"counter_env\", new.env(parent = emptyenv()), envir = globalenv())\n  if (!length(arg_list)) {\n    assign(\"counter_obj\", counter_add$new(limit = max_limit), envir = counter_env, inherits = FALSE)\n  } else if (arg_list$type == \"add\") {\n    assign(\"counter_obj\", counter_add$new(limit = max_limit), envir = counter_env, inherits = FALSE)\n  } else if (arg_list$type == \"subtract\") {\n    assign(\"counter_obj\", counter_subtract$new(limit = max_limit), envir = counter_env, inherits = FALSE)\n  } else {\n    stop(\"Incorrect tally counter type, type must be either add or subtract\")\n  }\n\n  # return data frame to allow use in piping\n  invisible(data)\n}\n\n#' click\n#'\n#' @return\n#' @export\n#'\n#' @examples\nclick <- function() {\n\n  # get counter object\n  counter_obj <- get(\"counter_obj\", envir = counter_env)\n\n  # increment counter object and check current counter status\n  counter_obj$counter()\n\n  # display current counter count\n  counter_obj$display()\n\n  # remove counter object and enviromnent if counter finished\n  if (counter_obj$status == \"OFF\") {\n      rm(counter_obj, envir = counter_env)\n      rm(counter_env, envir = globalenv())\n      gc()\n  }\n}\n\n\n",
    "created" : 1506438129861.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2941036285",
    "id" : "35755C8F",
    "lastKnownWriteTime" : 1506525636,
    "last_content_update" : 1506525636063,
    "path" : "D:/packages/tallyr/R/tally.R",
    "project_path" : "R/tally.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}